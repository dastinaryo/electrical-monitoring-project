# -*- coding: utf-8 -*-
"""electricity_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y2wgMiW1lDRQXYY1yOFZ9oX4enLXv7qd
"""

# !pip install keras==2.12.0
# !pip uninstall tensorflow
# !pip install tensorflow==2.12.0

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import json
# %matplotlib inline
import seaborn as sns
sns.set_theme(style="whitegrid")
import warnings
warnings.filterwarnings("ignore")
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM #, RNN, GRU
from sklearn.model_selection import GridSearchCV
from tensorflow.keras.wrappers.scikit_learn import KerasRegressor
from tensorflow.keras.callbacks import EarlyStopping

def sliding_window(data, window_size):
    sub_seq, next_values = [], []
    for i in range(len(data)-window_size):
        sub_seq.append(data[i:i+window_size])
        next_values.append(data[i+window_size])
    X = np.stack(sub_seq)
    y = np.array(next_values)
    return X,y

window_size = 14

import pickle

file_pickle = 'best_model.pkl'

# Membuka kembali file pickle
with open(file_pickle, 'rb') as file:
    best_model = pickle.load(file)

# # Menampilkan variabel yang diambil kembali
# print('Data yang diambil kembali dari file pickle:')
# print(best_model)

file_pickle = 'train.pkl'

# Membuka kembali file pickle
with open(file_pickle, 'rb') as file:
    train = pickle.load(file)

# train

file_pickle = 'test.pkl'

# Membuka kembali file pickle
with open(file_pickle, 'rb') as file:
    test = pickle.load(file)


# test

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit_transform(train[['biaya']])

train['scaled'] = scaler.transform(train[['biaya']])
test['scaled'] = scaler.transform(test[['biaya']])

# @title **AI Forecasting electricity costs**

#@markdown ---
#@markdown Silahkan anda masukan jumlah hari kedepan yang ingin diramalkan :

n_future = "30" #@param {type:"string"}

# forecasting data selanjutnya
y_train = scaler.transform(train[['biaya']])
n_future = int(n_future) # hari kedepan
future = [[y_train[-1,0]]]
X_new = y_train[-window_size:,0].tolist()

for i in range(n_future):
    y_future = best_model.predict(np.array([X_new]).reshape(1,window_size,1))
    future.append([y_future[0,0]])
    X_new = X_new[1:]
    X_new.append(y_future[0,0])

future = scaler.inverse_transform(np.array(future))
date_future = pd.date_range(start=train['tanggal'].values[-1], periods=n_future+1, freq='D')
# print(date_future)

# # Plot Data sebulan terakhir dan seminggu ke depan
# plt.figure(figsize=(15,5))
# sns.lineplot(data=train, x='tanggal', y='biaya', label = 'test')
# sns.lineplot(data=train, x='tanggal', y='predict', label = 'predict')
# sns.lineplot(x=date_future, y=future[:,0], label = 'future')
# plt.ylabel('biaya')

print(f"Besaran biaya selama {n_future} hari sebelumnya sebesar : \033[1mRp.{'{:,.0f}'.format(int(sum(train['biaya'][-n_future:]))).replace(',', '.')},-\033[0m")
print(f"Forecasting kisaran biaya selama {n_future} hari kedepan sebesar : \033[1mRp.{'{:,.0f}'.format(int(sum(future[:,0]))).replace(',', '.')},-\033[0m")